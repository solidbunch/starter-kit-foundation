# This is crontab file. Here you can customize your cron-jobs.
# Changes will apply after file save. Container restart not need
#

# * * * * * - time options, see more https://crontab.guru/
# flock - lock files are used to determine if a script or application is already running
# >> - append, > renew log file
# >> /var/log/cron.log 2>&1 - send output to log
# > /dev/null 2>&1 - send output to black hole
# 2>&1 redirects the output include both the Standard Error and Standard Out. Look details https://tldp.org/LDP/abs/html/io-redirection.html

# Example
# * * * * * [flock -n <path-to-lck-file>] <some-command> >> <path-to-log-file> 2>&1
# * * * * * [flock -n <path-to-lck-file>] <some-command> > /dev/null 2>&1



# Let's run!

# WordPress cron run by system cron
# By default error_log = /dev/stderr, so results will be in cron container docker logs.
# Use WP_DEBUG_LOG in .env file to setup log
*/5 * * * * cd ${WORKING_DIR} && docker compose exec -u ${DEFAULT_USER} php flock -n /var/log/wordpress/wp-cron.lck php /srv/web/wp-cron.php


# Backup database and media
15 3 * * * cd ${WORKING_DIR} && NO_COLOR=1 bash ./sh/cron/start-backup.sh daily >> /var/log/cron.log 2>&1

15 4 * * 1 cd ${WORKING_DIR} && NO_COLOR=1 bash ./sh/cron/start-backup.sh weekly >> /var/log/cron.log 2>&1

# SSL certificate renew by Certbot
30 3 * * *  cd ${WORKING_DIR} && \
            docker compose -f docker-compose.build.yml run --rm certbot su -c "certbot renew" && \
            docker compose restart nginx >> /var/log/cron.log 2>&1


# Remove old SSL logs
35 3 * * * ls -t ${WORKING_DIR}/logs/letsencrypt/letsencrypt.log.* | tail -n +12 | xargs -r rm -f

# An empty line is required at the end of this file for a valid cron file
